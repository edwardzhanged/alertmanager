// Code generated by go-swagger; DO NOT EDIT.

package stored_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetStoredAlertsParams creates a new GetStoredAlertsParams object
//
// There are no default values defined in the spec.
func NewGetStoredAlertsParams() GetStoredAlertsParams {

	return GetStoredAlertsParams{}
}

// GetStoredAlertsParams contains all the bound params for the get stored alerts operation
// typically these are obtained from a http.Request
//
// swagger:parameters getStoredAlerts
type GetStoredAlertsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*instance of the stored alerts
	  In: query
	*/
	Instance *string
	/*metric of the stored alerts
	  In: query
	*/
	Metric *string
	/*severity of the stored alerts
	  In: query
	*/
	Severity *string
	/*endTime of the stored alerts
	  Required: true
	  In: query
	*/
	TimeEnd strfmt.DateTime
	/*startTime of the stored alerts
	  Required: true
	  In: query
	*/
	TimeStart strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetStoredAlertsParams() beforehand.
func (o *GetStoredAlertsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qInstance, qhkInstance, _ := qs.GetOK("instance")
	if err := o.bindInstance(qInstance, qhkInstance, route.Formats); err != nil {
		res = append(res, err)
	}

	qMetric, qhkMetric, _ := qs.GetOK("metric")
	if err := o.bindMetric(qMetric, qhkMetric, route.Formats); err != nil {
		res = append(res, err)
	}

	qSeverity, qhkSeverity, _ := qs.GetOK("severity")
	if err := o.bindSeverity(qSeverity, qhkSeverity, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeEnd, qhkTimeEnd, _ := qs.GetOK("timeEnd")
	if err := o.bindTimeEnd(qTimeEnd, qhkTimeEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeStart, qhkTimeStart, _ := qs.GetOK("timeStart")
	if err := o.bindTimeStart(qTimeStart, qhkTimeStart, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindInstance binds and validates parameter Instance from query.
func (o *GetStoredAlertsParams) bindInstance(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Instance = &raw

	return nil
}

// bindMetric binds and validates parameter Metric from query.
func (o *GetStoredAlertsParams) bindMetric(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Metric = &raw

	return nil
}

// bindSeverity binds and validates parameter Severity from query.
func (o *GetStoredAlertsParams) bindSeverity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Severity = &raw

	return nil
}

// bindTimeEnd binds and validates parameter TimeEnd from query.
func (o *GetStoredAlertsParams) bindTimeEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("timeEnd", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("timeEnd", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("timeEnd", "query", "strfmt.DateTime", raw)
	}
	o.TimeEnd = *(value.(*strfmt.DateTime))

	if err := o.validateTimeEnd(formats); err != nil {
		return err
	}

	return nil
}

// validateTimeEnd carries on validations for parameter TimeEnd
func (o *GetStoredAlertsParams) validateTimeEnd(formats strfmt.Registry) error {

	if err := validate.FormatOf("timeEnd", "query", "date-time", o.TimeEnd.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindTimeStart binds and validates parameter TimeStart from query.
func (o *GetStoredAlertsParams) bindTimeStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("timeStart", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("timeStart", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("timeStart", "query", "strfmt.DateTime", raw)
	}
	o.TimeStart = *(value.(*strfmt.DateTime))

	if err := o.validateTimeStart(formats); err != nil {
		return err
	}

	return nil
}

// validateTimeStart carries on validations for parameter TimeStart
func (o *GetStoredAlertsParams) validateTimeStart(formats strfmt.Registry) error {

	if err := validate.FormatOf("timeStart", "query", "date-time", o.TimeStart.String(), formats); err != nil {
		return err
	}
	return nil
}
